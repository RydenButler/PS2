output <- list()
if(type == 'm' | type == 'both'){
M <- Values$LeemisM
M <- ifelse(M < 0.851, M, # This ifelse chain appends the stars
ifelse(M < 0.967, M <- paste0(M, '*'),
ifelse(M < 1.212, M <- paste0(M, '**'),
M <- paste0(M, '***'))))
output$LeemisM <- M
}
if(type == 'd' | type == 'both'){
D <- Values$ChoGainsD
D <- ifelse(D < 1.212, D, # This ifelse chain appends the stars
ifelse(D < 1.330, D <- paste0(D, '*'),
ifelse(D < 1.569, D <- paste0(D, '**'),
D <- paste0(D, '***'))))
output$ChoGainsD <- D
}
Header <-     " ---- Calculations of Benford's Law ----\n\n"
Title.M <-    "             Leemis's M                 \n"
Title.D <-    "            Cho-Gains's D               \n"
Title.Both <- "     Leemis's M      Cho-Gains's D     \n"
Bottom <-     "\n________________________________________\n     "
Sig <- output$Sig <- "*p<0.10; **p<0.05; ***p<0.01"
if(type == 'm'){
cat(Header, Title.M,
'            ', M,
Bottom, Sig, "\n\n")
}
if(type == 'd'){
cat(Header, Title.D,
'          ', D,
Bottom, Sig, "\n\n")
}
if(type == 'both'){
cat(Header, Title.Both,
'    ', M, '       ', D,
Bottom, Sig, "\n\n")
}
return(output)
}
print.benfords(rep(1,10000), 'both')
print.benfords(rep(1,10000))
print.benfords(rep(1,10000), 'd')
print.benfords <- function(x, type='m'){
source("calc_benfords.R")
Values <- calc.benfords(x=x, type=type)
output <- list()
if(type == 'm' | type == 'both'){
M <- Values$LeemisM
M <- ifelse(M < 0.851, M, # This ifelse chain appends the stars
ifelse(M < 0.967, M <- paste0(M, '*'),
ifelse(M < 1.212, M <- paste0(M, '**'),
M <- paste0(M, '***'))))
output$LeemisM <- M
}
if(type == 'd' | type == 'both'){
D <- Values$ChoGainsD
D <- ifelse(D < 1.212, D, # This ifelse chain appends the stars
ifelse(D < 1.330, D <- paste0(D, '*'),
ifelse(D < 1.569, D <- paste0(D, '**'),
D <- paste0(D, '***'))))
output$ChoGainsD <- D
}
Header <-     " ---- Calculations of Benford's Law ----\n\n"
Title.M <-    "             Leemis's M                 \n"
Title.D <-    "            Cho-Gains's D               \n"
Title.Both <- "     Leemis's M      Cho-Gains's D     \n"
Bottom <-     "\n________________________________________\n     "
Sig <- output$Sig <- "*p<0.10; **p<0.05; ***p<0.01"
if(type == 'm'){
cat(Header, Title.M,
'            ', M,
Bottom, Sig, "\n\n")
}
if(type == 'd'){
cat(Header, Title.D,
'           ', D,
Bottom, Sig, "\n\n")
}
if(type == 'both'){
cat(Header, Title.Both,
'    ', M, '       ', D,
Bottom, Sig, "\n\n")
}
return(output)
}
print.benfords(rep(1,10000), 'both')
print.benfords(rep(1,10000))
print.benfords(rep(1,10000), 'd')
getwd()
write.table(print.benfords(x, type='m'),
file=paste0(directory, 'benfords'))
write.table(print.benfords(c(1,2), type='m'),
file=paste0(directory, 'benfords'))
write.table(print.benfords(c(1,2), type='m'),
file=paste0(getwd(), 'benfords'))
write.csv(print.benfords(c(1,2), type='m'),
file=paste0(getwd(), 'benfords'))
write.csv(print.benfords(c(1,2), type='both'),
file=paste0(getwd(), 'benfords'))
getwd()
write.csv(print.benfords(c(1,2), type='both'),
file=paste0(getwd(), '/benfords'))
store.benfords <- function(x, type='m', directory=getwd()){
source(print_benfords.R)
print('File saved as benford.csv')
write.csv(print.benfords(c(1,2), type='both'),
file=paste0(getwd(), '/benford'))
}
store.benfords <- function(x, type='m', directory=getwd()){
source(print_benfords.R)
print('File saved as benford.csv')
write.csv(print.benfords(c(1,2), type='both'),
file=paste0(getwd(), '/benford'))
}
print('A')
store.benfords <- function(x, type='m', directory=getwd()){
source(print_benfords.R)
write.csv(print.benfords(c(1,2), type='both'),
file=paste0(getwd(), '/benford'))
print('File saved as benford.csv')
}
store.benfords <- function(x, type='m', directory=getwd()){
source(print_benfords.R)
write.csv(print.benfords(c(1,2), type='both'),
file=paste0(getwd(), '/benford'))
}
store.benfords <- function(x, type='m', directory=getwd()){
source(print_benfords.R)
write.csv(print.benfords(c(1,2), type='both'),
file=paste0(getwd(), '/benford'))
return('File saved as benford.csv')
}
store.benfords <- function(x, type='m', directory=getwd()){
source(print_benfords.R)
write.csv(print.benfords(c(1,2), type='both'),
file=paste0(getwd(), '/benford'))
print('File saved as benford.csv')
}
store.benfords()
getwd()
store.benfords <- function(x, type='m', directory=getwd()){
source('print_benfords.R')
write.csv(print.benfords(c(1,2), type='both'),
file=paste0(getwd(), '/benford'))
print('File saved as benford.csv')
}
store.benfords()
print.benfords(c(1,2), type='both')
store.benfords <- function(x, type='m', directory=getwd()){
source('print_benfords.R')
write.csv(print.benfords(x=x, type=type),
file=paste0(getwd(), '/benford'))
print('File saved as benford.csv')
}
store.benfords(rep(1,1000))
store.benfords(rep(1,1000))
print.benfords(rep(1,10000))
print.benfords(rep(1,10000), 'd')
print.benfords(rep(1,10000), 'both')
store.benfords <- function(x, type='m', directory=getwd()){
source('print_benfords.R')
write.csv(print.benfords(x=x, type=type),
file=paste0(getwd(), '/benford'))
print('File saved as benford.csv')
}
store.benfords(rep(1,1000))
source(calc_benfords)
source('calc_benfords')
source('print_benfords')
source('store_benfords')
source('calc_benfords')
getwd()
source('calc_benfords.R')
source('print_benfords.R')
source('store_benfords.R')
test.vector <- rep(1,1000)
test.matrix <- sample(1:9, 1000, replace = T)
calc.benfords(test.vector)
calc.benfords(test.matrix)
calc.benfords(test.vector, type = 'd')
calc.benfords(test.matrix, type = 'd')
calc.benfords(test.vector, type = 'both')
calc.benfords(test.matrix, type = 'both')
print.benfords(rep(1,10000))
print.benfords(rep(1,10000), 'd')
print.benfords(rep(1,10000), 'both')
store.benfords(rep(1,1000))
store.benfords(rep(1,1000))
store.benfords(rep(1,1000), 'd')
store.benfords(rep(1,1000), 'both')
read.csv('benford.csv')
read.csv('benford.txt')
source('calc_benfords.R')
source('print_benfords.R')
source('store_benfords.R')
store.benfords(rep(1,1000))
store.benfords(rep(1,1000), 'd')
store.benfords(rep(1,1000), 'both')
read.csv('benford.csv')
print.benfords <- function(x, type='m'){
source("calc_benfords.R")
Values <- calc.benfords(x=x, type=type)
output <- list()
if(type == 'm' | type == 'both'){
M <- Values$LeemisM
M <- ifelse(M < 0.851, M, # This ifelse chain appends the stars
ifelse(M < 0.967, M <- paste0(M, '*'),
ifelse(M < 1.212, M <- paste0(M, '**'),
M <- paste0(M, '***'))))
output$LeemisM <- M
}
if(type == 'd' | type == 'both'){
D <- Values$ChoGainsD
D <- ifelse(D < 1.212, D, # This ifelse chain appends the stars
ifelse(D < 1.330, D <- paste0(D, '*'),
ifelse(D < 1.569, D <- paste0(D, '**'),
D <- paste0(D, '***'))))
output$ChoGainsD <- D
}
Header <-     " ---- Calculations of Benford's Law ----\n\n"
Title.M <-    "             Leemis's M                 \n"
Title.D <-    "            Cho-Gains's D               \n"
Title.Both <- "     Leemis's M      Cho-Gains's D     \n"
Bottom <-     "\n________________________________________\n     "
Sig <- output$Sig <- "*p<0.10; **p<0.05; ***p<0.01"
if(type == 'm'){
cat(Header, Title.M,
'            ', M,
Bottom, Sig, "\n\n")
}
if(type == 'd'){
cat(Header, Title.D,
'           ', D,
Bottom, Sig, "\n\n")
}
if(type == 'both'){
cat(Header, Title.Both,
'    ', M, '       ', D,
Bottom, Sig, "\n\n")
}
invisible(output)
}
print.benfords(c(1,2))
a <- print.benfords(c(1,2))
a
source('calc_benfords.R')
source('print_benfords.R')
source('store_benfords.R')
print.benfords(rep(1,10000))
a <- print.benfords(rep(1,1000))
a
a <- c(1,2,3)
3 %in% a
3 !%in% a
!(3 %in% a)
source('calc_benfords.R')
calc.benfords <- function(x, type='m'){
if(!(type %in% c('m', 'd', 'both'))){
return("Type must be 'm', 'd', or 'both'")
}
# Convert all digits in x to strings.
# Remove all characters in each string except the leading coefficient
# Convert the character digits to a factor from 1 to 9
# This step guarantees that proportions of all digits will be evaluated,
# even in the event that a digit does not appear as a leading coefficient.
# Create a table of the digits, indicating frequencies in each cell
# Divide each cell in the table by the number of observations in x
# This converts the values to proportions of observed digits
# These proportions are stored in a vector for future use in the function return
digit.props <- table(factor(substr(as.character(x), 1, 1), levels = 1:9)) / length(x)
# Store digits proportions in the list that will be returned
output <- list(DigitProportions = digit.props)
# Subtract the right-hand quantity in the equation accounting for digit frequency
digit.sub <- digit.props - log10(1 + 1/1:9)
# Calculate Leemis M
if(type == 'm' | type == 'both'){
# Store in output list
output$LeemisM <- max(digit.sub) # The maximum value in 'v' is Leemis M
}
# Calculate Cho-Gains D
if(type == 'd' | type == 'both'){
# Store in output list
output$ChoGainsD <- sqrt(sum(digit.sub^2))
}
return(output)
}
test.vector <- rep(1,1000)
test.matrix <- sample(1:9, 1000, replace = T)
calc.benfords(test.vector)
calc.benfords(test.matrix)
calc.benfords(test.vector, type = 'd')
calc.benfords(test.vector, type = 'f')
type(test.vector)
typeof(test.vector)
typeof(test.matrix)
class(test.matrix)
is.matrix(test.matrix)
test.matrix
test.matrix <- matrix(sample(1:9, 1000, replace = T), ncol=10)
test.matrix
is.matrix(test.matrix)
calc.benfords(test.matrix)
calc.benfords(test.vector)
test.vector <- sample(1:9, 1000, replace = T)
test.matrix <- matrix(sample(1:9, 1000, replace = T), ncol=10)
calc.benfords(test.vector)
calc.benfords(test.matrix)
test.vector <- sample(1:9, 1000, replace = T)
test.matrix <- matrix(test.vector), ncol=10)
test.vector <- sample(1:9, 1000, replace = T)
test.matrix <- matrix(test.vector, ncol=10)
calc.benfords(test.vector)
calc.benfords(test.matrix)
is.vector(test.vector)
!is.vector(test.vector)
calc.benfords <- function(x, type='m'){
# logical checking valid type. If not 'm', 'd', or 'both' returns error message
if(!(type %in% c('m', 'd', 'both'))){
return("Type must be 'm', 'd', or 'both'")
}
if(!is.vector(x) | !is.matrix(x)){
return("Input, x, must be a vector or matrix.")
}
# Convert all digits in x to strings.
# Remove all characters in each string except the leading coefficient
# Convert the character digits to a factor from 1 to 9
# This step guarantees that proportions of all digits will be evaluated,
# even in the event that a digit does not appear as a leading coefficient.
# Create a table of the digits, indicating frequencies in each cell
# Divide each cell in the table by the number of observations in x
# This converts the values to proportions of observed digits
# These proportions are stored in a vector for future use in the function return
digit.props <- table(factor(substr(as.character(x), 1, 1), levels = 1:9)) / length(x)
# Store digits proportions in the list that will be returned
output <- list(DigitProportions = digit.props)
# Subtract the right-hand quantity in the equation accounting for digit frequency
digit.sub <- digit.props - log10(1 + 1/1:9)
# Calculate Leemis M
if(type == 'm' | type == 'both'){
# Store in output list
output$LeemisM <- max(digit.sub) # The maximum value in 'v' is Leemis M
}
# Calculate Cho-Gains D
if(type == 'd' | type == 'both'){
# Store in output list
output$ChoGainsD <- sqrt(sum(digit.sub^2))
}
return(output)
}
calc.benfords(test.vector)
is.vector(test.vector)
calc.benfords <- function(x, type='m'){
# logical checking valid type. If not 'm', 'd', or 'both' returns error message
if(!(type %in% c('m', 'd', 'both'))){
return("Type must be 'm', 'd', or 'both'")
}
if(!is.vector(x) & !is.matrix(x)){
return("Input, x, must be a vector or matrix.")
}
# Convert all digits in x to strings.
# Remove all characters in each string except the leading coefficient
# Convert the character digits to a factor from 1 to 9
# This step guarantees that proportions of all digits will be evaluated,
# even in the event that a digit does not appear as a leading coefficient.
# Create a table of the digits, indicating frequencies in each cell
# Divide each cell in the table by the number of observations in x
# This converts the values to proportions of observed digits
# These proportions are stored in a vector for future use in the function return
digit.props <- table(factor(substr(as.character(x), 1, 1), levels = 1:9)) / length(x)
# Store digits proportions in the list that will be returned
output <- list(DigitProportions = digit.props)
# Subtract the right-hand quantity in the equation accounting for digit frequency
digit.sub <- digit.props - log10(1 + 1/1:9)
# Calculate Leemis M
if(type == 'm' | type == 'both'){
# Store in output list
output$LeemisM <- max(digit.sub) # The maximum value in 'v' is Leemis M
}
# Calculate Cho-Gains D
if(type == 'd' | type == 'both'){
# Store in output list
output$ChoGainsD <- sqrt(sum(digit.sub^2))
}
return(output)
}
calc.benfords(test.vector)
calc.benfords(test.matrix)
test.df <- data.frame(test.matrix)
test.df
calc.benfords(test.vector)
calc.benfords(test.matrix)
calc.benfords(test.df)
source('calc_benfords.R')
source('print_benfords.R')
source('store_benfords.R')
test.vector <- sample(1:9, 1000, replace = T)
test.matrix <- matrix(test.vector, ncol=10)
test.df <- data.frame(test.matrix)
calc.benfords(test.vector)
calc.benfords(test.matrix)
calc.benfords(test.df)
calc.benfords(test.df) == "Input, x, must be a vector or matrix."
if(
calc.benfords(test.vector)$LeemisM == 0.07600805
calc.benfords(test.vector) == calc.benfords(test.matrix)
calc.benfords(test.df) == "Input, x, must be a vector or matrix."
)
calc.benfords(test.vector)$LeemisM == 0.07600805
calc.benfords(test.vector)$LeemisM
calc.benfords(test.vector)$LeemisM == 0.07600805
calc.benfords(test.vector) == calc.benfords(test.matrix)
calc.benfords(test.matrix)
calc.benfords(test.vector)
calc.benfords(test.vector)$LeemisM
0.07600805
calc.benfords(test.vector)$LeemisM == 0.07600805
if(
calc.benfords(test.df)
)
calc.benfords(test.df)
calc.benfords(test.df)
calc.benfords(test.df) == "Input, x, must be a vector or matrix."
calc.benfords(test.vector, type='a')
calc.benfords(test.vector, type='a') == "Type must be 'm', 'd', or 'both'"
if(
calc.benfords(test.df) == "Input, x, must be a vector or matrix." &
calc.benfords(test.vector, type='a') == "Type must be 'm', 'd', or 'both'"
)
)
if(
calc.benfords(test.df) == "Input, x, must be a vector or matrix." &
calc.benfords(test.vector, type='a') == "Type must be 'm', 'd', or 'both'"
)
if(
calc.benfords(test.df) == "Input, x, must be a vector or matrix." &
calc.benfords(test.vector, type='a') == "Type must be 'm', 'd', or 'both'"
){ print(1)}
if(
calc.benfords(test.df) == "Input, x, must be a vector or matrix." &
calc.benfords(test.vector, type='a') == "Type must be 'm', 'd', or 'both'"
){print('Passes arguments test.')} else {
print('Fails arguments test.')
}
calc.benfords(test.vector)$LeemisM
round(calc.benfords(test.vector)$LeemisM,5) == round(0.07600805, 5)
round(calc.benfords(test.vector)$LeemisM,8) == 0.07600805
if(
# test wrong input
calc.benfords(test.df) == "Input, x, must be a vector or matrix." &
# test wrong type
calc.benfords(test.vector, type='a') == "Type must be 'm', 'd', or 'both'"
# print success
){print('Passes arguments test.')} else {
# print failure
print('Fails arguments test.')
}
calc.benfords(test.vector)$DigitProportions
calc.benfords(test.vector)$DigitProportions[1]
calc.benfords(test.vector)$DigitProportions[1] == 0.124
set.seed(12345)
test.vector <- sample(1:9, 1000, replace = T)
test.matrix <- matrix(test.vector, ncol=10)
test.df <- data.frame(test.matrix)
if(
# test wrong input
calc.benfords(test.df) == "Input, x, must be a vector or matrix." &
# test wrong type
calc.benfords(test.vector, type='a') == "Type must be 'm', 'd', or 'both'"
# print success
){print('Passes arguments test.')} else {
# print failure
print('Fails arguments test.')
}
round(calc.benfords(test.vector)$LeemisM,8)
calc.benfords(test.vector)$DigitProportions[1]
round(calc.benfords(test.vector)$LeemisM,8) == 0.07284748
calc.benfords(test.vector)$DigitProportions[1] == 0.099
calc.benfords(test.vector) == calc.benfords(test.matrix)
calc.benfords(test.vector)$LeemisM == calc.benfords(test.matrix)$LeemisM
calc.benfords(test.vector)$DigitProportions
calc.benfords(test.vector)$DigitProportions ==
c(0.099, 0.103, 0.112, 0.108, 0.108, 0.111, 0.129, 0.124, 0.106)
if(
calc.benfords(test.vector)$DigitProportions ==
c(0.099, 0.103, 0.112, 0.108, 0.108, 0.111, 0.129, 0.124, 0.106)
){print('Passes proportions test.')} else {
print('Fails proportions test.')
}
identical(calc.benfords(test.vector)$DigitProportions,
c(0.099, 0.103, 0.112, 0.108, 0.108, 0.111, 0.129, 0.124, 0.106))
calc.benfords(test.vector)$DigitProportions
c(0.099, 0.103, 0.112, 0.108, 0.108, 0.111, 0.129, 0.124, 0.106)
calc.benfords(test.vector)$DigitProportions
calc.benfords(test.df)
calc.benfords(test.vector, type='a')
calc.benfords(test.vector)
calc.benfords(test.matrix)
calc.benfords(test.vector, type = 'd')
calc.benfords(test.matrix, type = 'd')
calc.benfords(test.vector, type = 'both')
calc.benfords(test.matrix, type = 'both')
print.benfords(rep(1,10000))
print.benfords(rep(1,10000), 'd')
print.benfords(rep(1,10000), 'both')
store.benfords(rep(1,1000))
store.benfords(rep(1,1000), 'd')
store.benfords(rep(1,1000), 'both')
store.benfords(rep(1,1000))
store.benfords(rep(1,1000), 'd')
store.benfords(rep(1,1000), 'both')
read.csv('benford.csv')
